name: Build & Push Docker Images for Eclipse Temurin

on:
  # pull_request:
  push:

jobs:
  # ─── GENERATE DYNAMIC MATRIX ────────────────────────────────────────────────
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
    steps:
      - name: Generate Matrix for Supported Eclipse Temurin Versions
        id: generate
        run: |
          echo "Fetching Eclipse Temurin versions..."
          curl -s https://endoflife.date/api/eclipse-temurin.json -o temurin.json

          current=$(date +%s)
          matrix_entries=()

          # Iterate over each object in the JSON.
          while IFS= read -r obj; do
            cycle=$(echo "$obj" | jq -r '.cycle')
            latest=$(echo "$obj" | jq -r '.latest')
            eol=$(echo "$obj" | jq -r '.eol')

            # If an EOL date exists and it's in the past, skip this version.
            if [ -n "$eol" ] && [ "$eol" != "null" ]; then
              eol_epoch=$(date -d "$eol" +%s)
              if [ "$eol_epoch" -lt "$current" ]; then
                echo "Skipping version $latest (cycle $cycle) because its EOL ($eol) is in the past."
                continue
              fi
            fi

            # Remove any build metadata (e.g. from "11.0.16+8" get "11.0.16")
            version_clean=$(echo "$latest" | sed -E 's/([+-]).*//')
            IFS='.' read -r major minor patch <<< "$version_clean"
            if [ -z "$minor" ]; then minor="0"; fi
            if [ -z "$patch" ]; then patch="0"; fi

            # Create a JSON entry for the matrix.
            matrix_entries+=("{\"temurin\":\"$latest\",\"major\":\"$major\",\"minor\":\"$minor\",\"patch\":\"$patch\"}")
          done < <(jq -c '.[]' temurin.json)

          # Assemble the final JSON matrix.
          matrix_json=$(IFS=, ; echo "{\"include\": [${matrix_entries[*]}]}")
          echo "Generated matrix: $matrix_json"
          echo "matrix=$matrix_json" >> "$GITHUB_OUTPUT"

  # ─── BUILD & PUSH JOB (runs once per matrix entry) ───────────────────────────
  build:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch latest Debian version
        id: debian
        run: |
          echo "Fetching latest Debian version..."
          DEBIAN_JSON=$(curl -s https://endoflife.date/api/debian.json)
          # Assumes that the first object in the Debian JSON contains the current stable version in "latest"
          LATEST_DEBIAN=$(echo "$DEBIAN_JSON" | jq -r '.[0].latest')
          echo "Latest Debian: $LATEST_DEBIAN"
          echo "version=$LATEST_DEBIAN" >> "$GITHUB_OUTPUT"

      - name: Build Docker image
        run: |
          TEMURIN_VERSION="${{ matrix.temurin }}"
          # Convert the plus sign in the version (e.g. 23.0.2+7) to an underscore (23.0.2_7)
          TEMURIN_DOCKER_VERSION=$(echo "$TEMURIN_VERSION" | sed 's/+/_/')
          DEBIAN_VERSION="${{ steps.debian.outputs.version }}"
          major="${{ matrix.major }}"
          minor="${{ matrix.minor }}"
          patch="${{ matrix.patch }}"

          # Construct image tags:
          #   - Major: e.g. "11-<debian_version>"
          #   - Minor: e.g. "11.0-<debian_version>"
          #   - Patch: e.g. "11.0.16-<debian_version>"
          TAG_MAJOR="${major}-${DEBIAN_VERSION}"
          TAG_MINOR="${major}.${minor}-${DEBIAN_VERSION}"
          TAG_PATCH="${major}.${minor}.${patch}-${DEBIAN_VERSION}"

          echo "Building Docker image for Java ${TEMURIN_VERSION} (using Docker tag ${TEMURIN_DOCKER_VERSION}) with Debian ${DEBIAN_VERSION}"
          echo "Image tags:"
          echo "  TAG_MAJOR: ${TAG_MAJOR}"
          echo "  TAG_MINOR: ${TAG_MINOR}"
          echo "  TAG_PATCH: ${TAG_PATCH}"

          # Build the Docker image, passing the converted TEMURIN_VERSION.
          docker build \
            --build-arg TEMURIN_VERSION="$TEMURIN_DOCKER_VERSION" \
            --build-arg DEBIAN_VERSION="$DEBIAN_VERSION" \
            -t your-docker-username/your-image:"$TAG_PATCH" .

          # Tag the image with the additional tags.
          docker tag your-docker-username/your-image:"$TAG_PATCH" your-docker-username/your-image:"$TAG_MAJOR"
          docker tag your-docker-username/your-image:"$TAG_PATCH" your-docker-username/your-image:"$TAG_MINOR"

      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker images
        run: |
          TEMURIN_VERSION="${{ matrix.temurin }}"
          DEBIAN_VERSION="${{ steps.debian.outputs.version }}"
          major="${{ matrix.major }}"
          minor="${{ matrix.minor }}"
          patch="${{ matrix.patch }}"

          TAG_MAJOR="${major}-${DEBIAN_VERSION}"
          TAG_MINOR="${major}.${minor}-${DEBIAN_VERSION}"
          TAG_PATCH="${major}.${minor}.${patch}-${DEBIAN_VERSION}"

          echo "Pushing Docker images for Java ${TEMURIN_VERSION}:"
          echo "We would need to docker push these images"
          your-docker-username/your-image:"$TAG_PATCH"
          your-docker-username/your-image:"$TAG_MAJOR"
          your-docker-username/your-image:"$TAG_MINOR"
